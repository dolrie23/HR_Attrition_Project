# -*- coding: utf-8 -*-
"""Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xqh5nCnyfA2yqomNuUHjeAc4HT5T7gJG
"""

import pandas as pd
import joblib
from sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder
from sklearn.compose import ColumnTransformer
from sqlalchemy import create_engine

preprocessor = joblib.load('/content/drive/MyDrive/Dicoding_DataScience/Submission_Expert_1/preprocessor.pkl')
model = joblib.load('/content/drive/MyDrive/Dicoding_DataScience/Submission_Expert_1/best_model.pkl')
data = pd.read_csv('/content/drive/MyDrive/Dicoding_DataScience/Submission_Expert_1/employee_data_pred.csv')

data

# def encode(df):
#     y = df['Attrition']
#     X = df.drop(columns=['Attrition'])

#     ordinal_features = ['Education', 'JobLevel', 'StockOptionLevel', 'EnvironmentSatisfaction',
#                         'WorkLifeBalance', 'JobSatisfaction', 'PerformanceRating',
#                         'RelationshipSatisfaction', 'JobInvolvement']

#     nominal_features = ['OverTime', 'JobRole', 'MaritalStatus', 'BusinessTravel', 'EducationField', 'Department', 'Gender']

#     numerical_features = ['MonthlyIncome', 'Age', 'PercentSalaryHike', 'TotalWorkingYears', 'TrainingTimesLastYear',
#                           'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']

#     preprocessor = ColumnTransformer(transformers=[
#         ('ord', OrdinalEncoder(), ordinal_features),
#         ('nom', OneHotEncoder(drop='first', sparse_output=False, handle_unknown='ignore'), nominal_features),
#         ('num', StandardScaler(), numerical_features)
#     ])

#     X_preprocessed = preprocessor.fit_transform(X)

#     ord_names = ordinal_features
#     nom_names = preprocessor.named_transformers_['nom'].get_feature_names_out(nominal_features).tolist()
#     num_names = numerical_features
#     all_feature_names = ord_names + nom_names + num_names

#     encode_df = pd.DataFrame(X_preprocessed, columns=all_feature_names, index=df.index)
#     encode_df['Attrition'] = y.values

#     print("Shape of encoded dataframe:", encode_df.shape)

#     return X_preprocessed, y, encode_df, preprocessor

# X_processed, y, encode_df, preprocessor = encode(data)

pred_data = preprocessor.transform(data)

ordinal_features = ['Education', 'JobLevel', 'StockOptionLevel', 'EnvironmentSatisfaction',
                    'WorkLifeBalance', 'JobSatisfaction', 'PerformanceRating',
                    'RelationshipSatisfaction', 'JobInvolvement']
nominal_features = ['OverTime', 'JobRole', 'MaritalStatus', 'BusinessTravel', 'EducationField', 'Department', 'Gender']
numerical_features = ['MonthlyIncome', 'Age', 'PercentSalaryHike', 'TotalWorkingYears', 'TrainingTimesLastYear',
                      'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']

ord_names = ordinal_features
nom_names = preprocessor.named_transformers_['nom'].get_feature_names_out(nominal_features).tolist()
num_names = numerical_features
all_feature_names = ord_names + nom_names + num_names

encode_df = pd.DataFrame(pred_data, columns=all_feature_names, index=data.index)

print("Shape of encoded dataframe:", encode_df.shape)

selected_df = encode_df[['OverTime_Yes', 'StockOptionLevel', 'MaritalStatus_Single', 'JobSatisfaction', 'TotalWorkingYears', 'EnvironmentSatisfaction', 'YearsAtCompany', 'Age', 'YearsWithCurrManager', 'MonthlyIncome']]

pred = model.predict(selected_df)
proba = model.predict_proba(selected_df)

data['Attrition'] = pred
data['Probability'] = proba[:,1]

data

URL = "postgresql://postgres.rpdjzifxzjubgjakcgtx:tUlXvFumiAZpPI7G@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres"
engine = create_engine(URL)
data.to_sql('Prediction_Data', engine, if_exists="replace", index=False)

data.to_csv('/content/drive/MyDrive/Dicoding_DataScience/Submission_Expert_1/Prediction.csv', index=False)

